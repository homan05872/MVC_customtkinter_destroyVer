下記の設計に従ってコードを生成してください。

- クラスの分類がViewクラスのbuild_ui()メソッドに関しては定義のみして実装はしなくて良いです。
- ## 4.1. 初期化～起動に張っている画像をplantUMLの下記
"""
@startuml シーケンス図(起動時)

actor User as user
participant main.py as Main
participant App
participant CustomCTk
participant MyModel
participant Page1Controller
participant Page2Controller
participant Page1

== アプリケーション初期化 ==
user -> Main : 実行
Main -> App : インスタンス生成\n※変数self.appで保持
App -> CustomCTk : インスタンス生成\nテーマカラーやウィンドウサイズ設定\n※変数self.rootで保持
App -> MyModel : インスタンス生成\n保持データの初期値設定\n※変数self.my_modelで保持
App -> Page1Controller : インスタンス生成\n※変数self.connsで保持(辞書型リスト(キー："Page1"))
App -> Page2Controller : インスタンス生成\n※変数self.connsで保持(辞書型リスト(キー："Page2"))

== 最初のページを表示 ==
Main -> App : self.app.run()\nアプリ起動処理
App -> Page1Controller : self.app.show_page("Page1")\nPage1の表示処理呼び出し
Page1Controller -> MyModel : _send_view_data()\n画面表示用データ取得
Page1Controller -> Page1 : インスタンス生成\n初期化処理\n※変数self.viewで保持
Page1 -> Page1 : build_ui(self)\nUI生成
Page1Controller -> Page1Controller : self.set_view_event()\n画面のUI要素(ボタンなど)のイベントに各メソッドを紐づけ


== メインループ開始（起動） ==
App -> CustomCTk : self.root.mainloop()\nアプリ起動
CustomCTk -> user : 画面表示（Page1が表示される）

@enduml

"""
- ## 4.2. ページ遷移
"""
@startuml ページ遷移

actor User as user
participant Page1
participant Page1Controller
participant App
participant Page2Controller
participant Page2

== ユーザー操作 ==
user -> Page1 : "Send"ボタンをクリック

== コントローラによる処理 ==
Page1 -> Page1Controller : goto_page("Page2")\nページ遷移処理呼び出し
Page1Controller -> App : show_page("Page2")\n"Page2"のコントローラからShowメソッド呼び出し
App -> Page2Controller : show()\nPage2表示処理
Page2Controller -> Page2Controller : self._send_view_data()\n表示用データ取得

== ページ2の表示 ==
Page2Controller -> Page2 : インスタンス生成※self.viewで保持\nUI生成
Page2 -> Page2 : build_ui(self)\nUI生成
Page2Controller -> Page2Controller : self.set_view_event()\n画面のUI要素(ボタンなど)のイベントに各メソッドを紐でづけ
Page2Controller -> Page2Controller : self.viewをgrid()メソッド画面に配置。
Page2Controller -> user : ページ2が表示される

@enduml

""" 

# 1. customtkinterのMVCテンプレート設計書 
 pythonを使用したネイティブアプリの開発を効率的に行えるように作成するテンプレートの設計書です。<br>
 Webフレームワークでよく使われるMVCアーキテクチャを採用しました。

## 1.1. 要件
 - CustomTkinterを利用したMVCテンプレートを作成すること。
 - 画面は「Page1」と「Page2」の2つを用意する。
 - 出来る限り、あらゆる実装方法が統一化できる構成にする。

## 1.2. MVCについて
 システム開発においての設計方針の一つで「Model」　「View」　「Controller」の3つに分けてコードを管理する構成です。<br>
 ![document\img\MVC.png](img/MVC.png)

**役割**
- Model: データ管理
- Controller: ビジネスロジック
- View: 画面表示
それぞれの役割は上記の通りです。<br>
※コントローラは管理するビューを決めて、そのビューに関するビジネスロジック処理を定義するものです。<br>

## 1.3. 基本的な構成
MVCではクラス同士の関係を疎結合にし、それぞれの独立した形を保つ必要があります。今回、UI生成についてはControllerクラスでViewクラスをインスタンス化して行う構成を考えたました。その構成のまま、Controllerクラス同士の独立性を保つため、AppクラスでViewクラスの生成に使うControllerをすべて保持し、表示するページによってControllerクラスを切り替えることができるようにしてあります。

![document\img\アーキテクチャ.png](img/アーキテクチャ.png)

**コントローラとビューの独立性を保つためにしたこと**
- ページの生成方法
    <br>コントローラのメソッドでビュークラスのインスタンスを生成して、UI生成を行います。
- コントローラの抽象クラスを作成
    <br>ページ生成などの共通メソッドを必ず実装するためにBaseControllerクラスを作成します。
- ページ遷移の実現方法
    <br>すべてのコントローラをAppクラスでまとめて管理し、そこからページ表示メソッドを呼び出せるよう作成します。
    <br>※コントローラを辞書型リストで保持し、キーを指定して簡単に呼び出す事ができます。

**今回のテンプレートで使用する主なクラスの種類**<br>
※クラス名の語尾に群がついているものは複数定義される可能性があるものです。
| No | クラス名 | 説明 | 備考 |
| ---- | ---- | ---- | ---- |
| 1 | Viewクラス群 | UI生成を担当。 |　 |
| 2 | Controllerクラス群 | 担当するビューに関してのビジネスロジックを担当。主にModelやViewの橋渡しを行う。 |　担当するViewとセットで作成する。
| 3 | Modelクラス群 | データの保持を担当。 |
| 4 | App | アプリの初期化(各クラスの連携)とコントローラの管理。 | ページ遷移などの共通処理をこのクラスを経由し、コントローラを切替えて呼び出す。| 
| 5 | CustomCtk | アプリ全体の設定を担当。 |  |

　シングルトンパターンのように主要クラス(View,Controller,Modelなど)はAppクラスのコンストラクタで各クラスのインスタンスを１つだけ生成し、共有して連携を行います。
 <br>　※Viewは対となるControllerクラスでインスタンス化してUI生成を行います。

## 1.4. 機能
- 1-1 Page2への遷移
- 1-2 Page1への遷移
<br> ※Page1の入力フォームの内容がPage2へ表示される。（タイトルとコンテンツ）
![document\img\機能.png](img/機能.png)

## 1.5. 命名ルール
1. 「Model」「Controller」に該当するクラスは語尾に必ず、該当する構成名を付ける事。

    例: 「Modelクラス」→ ○○Model<br>
 　　「Controllerクラス」 → ○○Contorller<br>
　　上記のようにＭＶＣに関するクラスどの担当をしているのかを分かるようにする。
<br>　　※Viewに関しては何のページなのかを分やすく命名する。

# 2. 一覧
クラスとイベントメソッドの一覧です。
<br>※イベントメソッドの定義：ビューのボタンを押された時などに紐づける関数やメソッド

## 2.1. クラス一覧
| No | クラス名 | 説明 | 継承 | モジュール | 
| ---- | ---- | ---- | ---- | ---- |
| 1 | CustomCTk | アプリウィンドウの提供や全体のデザイン設定など | Ctkクラス<br>(customtkinterライブラリ) | custom_ctk.py |
| 2 | Page1 | Page1のUI生成 | CtkFrameクラス<br>(customtkinterライブラリ) | page1.py |
| 3 | Page2 | Page2のUI生成 | CtkFrameクラス<br>(customtkinterライブラリ) | page2.py |
| 4 | App | 各種クラスの連携とコントローラの管理 | なし | app.py |
| 5 | BaseController | ※Controllerの抽象クラスです。<br>Controllerを実装の際に継承必須です。 | なし | base_controller.py |  |
| 6 | Page1Controller | Page1画面のビジネスロジック | BaseController | page1_controller.py |
| 7 | Page2Controller | Page2画面のビジネスロジック | BaseController | page2_controller.py |  |
| 8 | MyModel | データ保持クラス | なし | my_model.py |

## 2.2. イベント一覧
※BaseContorllerクラスの継承とAppクラスでのコントローラ管理により、各コントローラクラスからgoto_pageメソッドでページ名を指定すれば呼び出せるようになっています。
| No | メソッド名 | 説明 | 引数 | 戻り値 | クラス名 |
| ---- | ---- | ---- | ---- | ---- | ---- |
| 1-1 | goto_page | ページ2へ遷移<br>※継承元のBaseControllerで定義したgoto_pageでPage2へ画面遷移する | 引数1:self<br>引数2:template_name:str | なし | Page1Controller |
| 1-2 | goto_page | ページ1へ遷移<br>※継承元のBaseControllerで定義したgoto_pageででPage1へ画面遷移する | 引数1:self<br>引数2:template_name:str | なし | Page2Controller | 

# 3. 実装例
 テンプレートでクラスを作るための実装例です。

## 3.1. Appクラスの実装例
　各クラスの初期化(連携)やアプリの起動を行う為のクラスです。
<br>　シングルトンパターンのように主要クラス(View,Controller,Modelなど)はAppクラスのコンストラクタで各クラスのインスタンスを１つだけ生成し、共有して連携を行います。
<br>　※Viewは対となるControllerクラスでインスタンス化してUI生成を行います。

下記のクラスをインスタンス化し、連携を行います。
1. CustomCTkクラス
2. Modelクラス群
3. Controllerクラス群。※辞書型で保持し、指定のキーでコントローラインスタンスを取り出せるようにする

<br>★1はページ遷移を行う為のメソッド
<br>★2はアプリ起動を行う為のメソッド


```python
from controllers import Page1Controller, Page2Controller
from models.mymodel import MyModel
from core.custom_ctk import CustomCTk

class App:
    """全てのコントローラクラスを管理するクラス
    """
    def __init__(self) -> None:
        """ 初期化処理
        """
        self.root = CustomCTk() # ←1.
        # モデルの初期化
        self.my_model = MyModel()   # ←2.
        # コントローラの初期化(全てのコントローラはself.connsで管理)
        # ↓4.
        self.conns = {
            'Page1':Page1Controller(self, self.my_model),
            'Page2':Page2Controller(self, self.my_model)
        }
        # 現在表示しているビューのコントローラ
        self.current_conn = None

    # ↓★1
    def show_page(self, template_name:str) -> None:
        """ ページ遷移呼び出し処理

        Args:
            template_name (str): ページ名
        """
        controller = self.conns[template_name]
        controller.show()
    
    # ↓★2
    def run(self) -> None:
        """ アプリ起動
        """
        # 最初のページを表示
        self.show_page('Page1')
        # メインループ
        self.root.mainloop()
```

エントリポイント(main.py)<br>
 アプリ起動はmainでAppクラスをインスタンス化し、runメソッドを呼び出して行っています。

``` python
from core import App

def main():
    app = App()
    app.run()

if __name__ == "__main__":
    main()
```

## 3.2. Viewクラス群の実装例
1. CTkFrameクラスの継承
2. 初期化処理 （引数data(辞書型リスト)をインスタンス変数へ格納）
3. UI生成メソッドをコンストラクタで呼び出す
4. UI生成に必要なデータは2.の変数から取得して使用する
``` python
import customtkinter as ctk
from typing import Any

class Page1(ctk.CTkFrame):  # ←1.
    def __init__(self, master:Any, data:dict|None, **kwargs) -> None:
        """ 初期化処理

        Args:
            master (ctk.CTk): CustomCtkクラスのインスタンス
            data (dict | None): 表示用データ
        """
        super().__init__(master, **kwargs)
        self.data = data    # ←2.
        # グリッドレイアウトの設定
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)
        
        # UI生成
        self.build_ui()     # ←3.

    def build_ui(self) -> None:
        """ UI生成処理
        """
        # 中央にフレーム配置
        self.frame = ctk.CTkFrame(self)
        self.frame.grid(row=0, column=0, padx=20, pady=20)
        # ページタイトル
        self.label = ctk.CTkLabel(self.frame, text="This is Page 1")
        self.label.grid(row=0, column=0, padx=20, pady=20)
        # ページ２に表示するタイトル入力
        self.title_input = ctk.CTkEntry(self.frame, textvariable=self.data["title"], width=300)
                                                                # ↑4.
        self.title_input.grid(row=1, column=0, padx=20, pady=20)
        # ページ２に表示するコンテンツ入力
        self.content_input = ctk.CTkEntry(self.frame, textvariable=self.data["content"], width=300)
                                                                    # ↑4.
        self.content_input.grid(row=2, column=0, padx=20, pady=20)
        # ページ２リンクボタン
        self.button = ctk.CTkButton(self.frame, text="Send")
        self.button.grid(row=3, column=0, padx=20, pady=20)
```
## 3.3. Controllerクラス群の実装例
1. BaseControllerを継承
2. BaseControllerのコンストラクタ起動
3. ビューのUI要素(ボタンなど)のイベントに紐づけるメソッドを設定するメソッドの実装(紐づけるイベントがない場合はpassを記述)
4. ビューに送るデータを設定するメソッドの実装(Viewへ渡すデータがない場合はNoneを返してください。)
<br>　※3. 4.のメソッドは実装必須です。

実装例（Page1Controller）
```python
class Page1Controller(BaseController):  # ←1.
    def __init__(self, app:Any, my_model:Any=None) -> None:
        """初期化処理

        Args:
            app (Any): Appクラスのインスタンス
            my_model (_type_, optional): MyModelクラスのインスタンス. Defaults to None.
        """
        super().__init__(app, Page1)
        self.view:Page1
        self.my_model = my_model
        
    def _set_view_event(self) -> None:
        """ ビューのUI要素へイベントメソッドを紐づける為のメソッド
        """
        self.view.button.configure(command=partial(self.goto_page, "Page2"))

    def _send_view_data(self) -> dict:
        """ 画面表示用データを渡す処理

        Returns:
            dict: 表示用データ
        """
        title = self.my_model.title
        content = self.my_model.content
        
        context = {'title': title, 'content': content}
        return context
```

**BaseControllerクラス**<br>
 ビューを管理するコントローラの抽象クラスです。UI生成を行う②_send_view_data()や③_set_view_event()メソッドを呼び出す①showメソッドで呼び出すことにより、ビューへのデータの受け渡しや各UI要素へのイベントメソッドの紐づけを実現しています。※②、③のメソッドは継承先で具体的な実装を行います。
``` python
from typing import Any
from abc import ABC, abstractmethod

class BaseController(ABC):
    def __init__(self, app_conn:Any, ViewClass:Any) -> None:
        """ 初期化処理(CustomCTkクラスで管理するコントローラ群への登録処理)
        
        Args:
            app_conn (Any): AppControllerインスタンス
            ViewClass (Any): 管理するビュークラス
        """
        self.app_conn = app_conn 
        self.root = app_conn.root
        self.ViewClass = ViewClass
        self.view = None
    # ↓①
    def show(self) -> None:
        """ ページ表示処理(このコントローラで管理するビューの表示処理)
        """
        # ビューデータの取得
        data = self._send_view_data()
        # 現在ビュー表示の削除
        if self.app_conn.current_conn != None:
            self.app_conn.current_conn.view.destroy()
        # 次のビュー表示
        self.view = self.ViewClass(self.root, data ,corner_radius=0)
        self.view.grid(row=0,column=0,sticky="nsew")
        # 次のビューのコントローラをAppControllerで保持
        self.app_conn.current_conn = self
        # ビューUI要素に紐づけるイベントメソッドを設定する
        self.__set_view_event()
    
    # ↓②
    @abstractmethod
    def __set_view_event(self) -> None:
        """ ビューのUI要素へイベントメソッドを紐づける為のメソッド
        """
        pass
    
    # ↓③
    @abstractmethod
    def _send_view_data(self) -> dict | None:
        """ ビューへ表示に必要なデータを渡す処理 ※データが必要ない場合はNoneを返す

        Returns:
            dict | None: 表示データ
        """
        return None
    
    def goto_page(self, template_name:str) -> None:
        """ ページ遷移処理
        Args:
            template_name (str): 遷移するページ名
        """
        self.app_conn.show_page(template_name)
```

## 3.4. Modelクラス群の実装例
 Viewで表示するデータなどアプリで使用するデータを保持するためのクラスです。インスタンス変数でデータを保持し、Controllerクラスでデータ取得や更新を行う。<br>
 ※今回はStringVarを使用しているため、Page1の入力フォームで変更すると自動でセットした値が更新されます。
```python
import tkinter as tk

class MyModel:
    def __init__(self) -> None:
        self.title = tk.StringVar(value="Page 2 Title")
        self.content = tk.StringVar(value="This is the content of Page 2")
```

# 4. 処理の流れ
 下記のシーケンス図で処理の流れを確認してください。

## 4.1. 初期化～起動
![document\img\シーケンス図(起動時).png](img/シーケンス図(起動時).png)

## 4.2. ページ遷移
※Page1→Page2へ遷移する例ですが、Page2→Page1も同じです<br>
![document\img\シーケンス図(ページ遷移).png](img/シーケンス図(ページ遷移).png)

# 5. 詳細設計
 クラスごとの詳細設計です。

## 5.1. ディレクトリ構成
```
src
 ├── controllers
 │   ├── __init__.py
 │   ├── page1_controller.py
 │   └── page2_controller.py
 ├── core
 │   ├── __init__.py
 │   ├── app.py
 │   ├── base_controller.py
 │   └── custom_ctk.py
 ├── main.py
 ├── models
 │   └── mymodel.py
 └── views
     ├── __init__.py
     ├── page1.py
     └── page2.py
```


## 5.2. mainモジュール（エントリポイント）
 最初の起点となるモジュールです。
 main関数を定義し、このモジュール内で呼び出してください。<br>

 main関数で行う事。
   - Appクラスのインスタンス化(変数app_controllerで保持)
   - 変数app_controllerからrun()メソッドを呼び出す。

## 5.3. coreパッケージ
アプリ全体を管理する汎用的なクラスモジュールを配置します。

### 5.3.1. CustomCTkクラス
CustomTkinterのウィンドウを提供や設定(カラーテーマなど)を行うためのクラスです。<br>

モジュール：custom_ctk.py<br>
継承：CTkクラス(customtkinterライブラリ)<br>

 - \_\_init\_\_(self) -> None:
    <br>説明:
    <br>　　アプリ全体の設定（主にデザインやイベントに関する設定）
    <br>引数:
    1. self: 自クラスインスタンス
    
    <br>戻り値: なし

    <br>実装:
    - 継承しているCTkのコンストラクタの呼び出し
    - テーマカラーの設定 →背景テーマ:'dark', 要素テーマ'blue'
    - グリッドレイアウトの設定 →row=0, column=0に配置されたウィジェットを画面全体に広げる。
    <br>※ここにCtkFrameを継承したビュークラスを配置することにより、画面表示を行う。
    - 初期表示の画面サイズの設定 →550×550
    - ドラッグ&ドロップのイベントを設定できるようにする


### 5.3.2. Appクラス
アプリの初期化(クラス同士の連携)や起動とControllerクラス群を管理し、別ページ同士の連携を行うためのクラスです。

モジュール：app_controller.py<br>
継承：なし

下記メソッドを定義してください。
 - \_\_init\_\_(self) -> None:
    <br>説明: 
    <br>　　コンストラクタです。各クラスをインスタンス化し、引数で受け渡しすることで、各クラスの連携を実現しています。
    <br>引数:　
    1. self: 自クラスインスタンス

    <br>戻り値: なし

    <br>実装:
    <br>　※下記のインスタンス変数を定義し、指定の値で初期化して下さい。
    | 変数名 | 初期値 | 説明 |
    | ---------------- | ------- | ---- |
    | self.root | CustomCtkクラスのインスタンス生成し保持。<br>※引数なし | 各Controllerクラスに渡し、Viewの生成で使用する。 |
    | self.my_model | MyModelクラスのインスタンス生成し、保持。<br>※引数なし | Controllerクラスの引数に渡すことでデータの共有を行う。 |
    | self.current_conn | None | 現在表示しているページのControllerインスタンスを保持。ページ遷移時での使用。 |
    | self.conns | 辞書型リストを定義し、その中にControllerインスタンスを保持。<br>★self.connsの定義参照。 | Controllerクラス同士の連携で使用。 |

    <br>

    **★self.connsの定義**
    <br>下記のクラスをインスタンス化し保持してください。
    | キー名 | クラス | 引数 |
    | ---- | ---- | ---- |
    | "Page1" | Page1Controller | 引数1: self(自クラスインスタンス), 引数2: self.my_model  |
    | "Page2" | Page2Controller | 引数1: self(自クラスインスタンス), 引数2: self.my_model |

  - show_page(self, template_name:str) -> None:
    <br>説明:
    <br>　　ページ遷移を行うために使用するメソッド。次に表示する画面のcontrollerを取得し、ページを表示するメソッドを呼び出す。
    <br>引数:
    1. self: 自クラスインスタンス
    2. template_name: ページ遷移先のコントローラを指定するためのキー。 

    <br>戻り値: なし

    <br>実装:
    <br>　　変数[self.conns]から引数[template_name]キーのコントローラを取り出し、show()メソッドを呼び出す（引数なし）。

  - run(self) -> None:
    <br>説明: 
    <br>　　アプリ起動を行います。
    <br>引数: 
     1. self: 自クラスインスタンス

    <br>戻り値: なし

    <br>実装:
    - Page1の表示<br>
      self.show_page()メソッドを呼び出す。引数には"Page1"を渡す。
    - アプリの起動<br>
      self.root.mainloop()メソッドを呼び出す。

### 5.3.3. BaseControllerクラス
Cotrollerクラス群の抽象クラスです。
<br>※各Controllerクラスはこのクラスを継承する必要があります。

モジュール：base_controlle.py<br>
継承：なし

下記メソッドを定義してください。
- \_\_init\_\_(self, app:Appインスタンス, ViewClass:ビュークラス)
    <br>説明：
    <br>　　初期化を行うコンストラクタです。
    <br>引数: 
    1. self: 自クラスインスタンス　
    2. app:Appインスタンス 
    3. ViewClass:ビュークラス ※インスタンスではなくクラス自体

    <br>戻り値: なし

    <br>実装：
   1. 下記のインスタンス変数を定義し、指定の値で初期化して下さい。

        | インスタンス変数名 | 初期化値 | 役割 | 備考 |
        | ---------------- | ------- | ---- | ---- |
        | self.app | 引数[app] | 他コントローラクラスとの連携時に使用。 |
        | self.root | self.app.root(CustomCTkインスタンス) | UI生成で使用。 | Appのインスタンス変数から取得。 |
        | self.ViewClass | 引数[ViewClass] | UI生成時この変数で保持したクラスをインスタンス生成する。 |  |
        | self.view | None | UI生成時、Viewのインスタンスを保持。 |  |

- def goto_page(self, template_name:str) -> None:
    <br>説明：別ページへの遷移処理(ontrollerで管理するビューの表示処理)
    <br>引数：
    1. self: 自クラスインスタンス 
    2. template_name: ページ名（文字列）※このページ名はAppインスタンスで保持する変数self.connsの辞書型リストを指定するためのキー
    
    <br>戻り値：なし

    <br>実装：
    - self.app.show_page()メソッドを呼び出す。
    <br>※引数1:引数[template_name]

    <br>Appクラスのメソッドで引数1:[template_name]で指定したcontrollerクラスのshowメソッドを呼び出す事により、次のページのUI生成を行う。
    

- def show(self) -> None:
    <br>説明：
    <br>　　ページ表示処理(Controllerで管理するビューの表示処理)
    <br>引数: 
    1. self: 自クラスインスタンス
    
    <br>戻り値: なし

    <br>実装: 
    - self._send_view_data()を呼び出し、 画面に必要なデータを取得。(変数dataで保持)
    - self.app.current_conn(Appクラスで保持している現在のコントローラ)がNoneではない場合、
      <br>self.app.current_conn.view.destroy()を呼び出して、現在ビューの表示を削除する。
    - self.ViewClassで保持しているビュークラスをインスタンス化してください。(変数self.viewで保持)
        - 引数1: self.root(CustomCTkインスタンス) 
        - 引数2:変数data
        - 引数3: corner_radius=0
    - self.view.grid()メソッドを呼び出し、ビュークラスをウィンドウに配置して下さい。
      <br>引数には下記のようになる引数を設定
        - 画面の行0, 列0に配置
        - 画面いっぱいに広げる
    - self.app.current_conn(Appクラスのインスタンス変数)へself(自クラスインスタンス)を代入してください。
    - _set_view_event()メソッドを呼び出す。配置したself.viewのUI要素（ボタンなど）Controllerのメソッドを紐づける。

- def _set_view_event(self) -> None:
    <br>説明：
    <br>　　ViewのUI要素（ボタンなど）イベントへControllerのメソッドを紐づける為のメソッド。
    <br>　　※実装忘れ防止のため、抽象メソッドとして定義。
    <br>引数:
    1. self: 自クラスインスタンス
    
    <br>戻り値: なし

    <br>実装:
    <br>　　なし(pass)。抽象メソッドとして定義する。

- def _send_view_data(self) -> dict | None:
    <br>説明：
    <br>　　ビューへ表示に必要なデータを渡す処理 
    <br>　　※データが必要ない場合はNoneを返す。
    <br>　　※実装忘れ防止のため、抽象メソッドとして定義。
    <br>引数: 
    1. self: 自クラスインスタンス
    
    <br>戻り値: None

    <br>実装:
    <br>　　抽象メソッドと定義し、戻り値にNoneを返す。

## 5.4. modelsパッケージ
データ管理を行うModelクラスのモジュールをまとめたパッケージ。

### 5.4.1. MyModelクラス
Page2へ表示するデータを保持しておくためのクラスです。Controllerを通してViewにデータを渡します。

モジュール：mymodel.py<br>
継承：なし

下記メソッドを定義してください。
- def \_\_init\_\_(self) -> None:
    <br>説明: 
    <br>　　初期化でインスタンス変数にタイトルとコンテンツの文字列データを保持する。
    <br>引数: 
    1. self: 自クラスインスタンス

    <br>戻り値: なし

    <br>実装:
    <br>　下記のインスタンス変数をtkinterライブラリのStringVar()を使用して初期化してください。
    | インスタンス変数名 | 初期化値 | 役割 | 備考 |
    | ---------------- | ------- | ---- | ---- |
    | self.title | "Page 2 Title" | Page2のタイトル | StringVarで保持 |
    | self.content | "This is the content of Page 2" | StringVarで保持 |  |

    ※StringVarで保持することにより、テキストボックスでの変更がそのまま変数に適応されます。


## 5.5. controllersパッケージ
各コントローラクラスの実装。（各Viewクラスとペアで作成する）

### 5.5.1. Page1Controllerクラス
Page1クラス(ビュークラス)のビジネスロジック（イベントメソッド）を定義するControllerクラス

モジュール：page1_controller.py<br>
継承：BaseControllerクラス

下記メソッドを定義してください。
- def \_\_init\_\_(self, app:Any, my_model:Any=None) -> None:

    <br>説明:
    <br>インスタンス生成時の初期化処理です。
    <br>引数:
    1. self: 自クラスインスタンス
    2. app: Appインスタンス
    3. my_model: MyModelクラスのインスタンス
    
    <br>戻り値: なし 

    <br>実装:
    - 継承したBaseControllerのコンストラクタを呼び出してください。引数には引数[app]、Page1クラス(page1.pyからインポート)を渡してください。
    - self.my_model変数に引数[my_model]を代入して保持してください。

- def _set_view_event(self) -> None:
    <br>説明：
    <br>　　ViewのUI要素（ボタンなど）イベントへControllerのメソッドを紐づける為のメソッド。
    <br>引数:
    1. self: 自クラスインスタンス
    
    <br>戻り値: なし

    <br>実装:
    - self.viewからボタン要素を取得し、configureメソッドでself.goto_page()メソッドを紐づける。引数に文字列"Page2"を渡す。

- def _send_view_data(self) -> dict:
    <br>説明:
    <br>　　UI生成時、Page1クラスに渡すデータを設定します。
    <br>引数:
    1. self: 自クラスインスタンス
    
    <br>戻り値: 辞書型リスト

    <br>実装:
    - 変数self.my_modelからtitleとcontentを取得し、戻り値に辞書型リスト返してください。
    <br>戻り値データの形: {'title': title, 'content': content}

### 5.5.2. Page2Controllerクラス

モジュール：page2_controller.py<br>
継承：BaseControllerクラス

下記メソッドを定義してください。
- def \_\_init\_\_(self, app:Any, my_model:Any=None) -> None:

    <br>説明:
    <br>　　インスタンス生成時の初期化処理です。
    <br>引数:
    1. self: 自クラスインスタンス
    2. app: Appインスタンス
    3. my_model:MyModelクラスのインスタンス
    
    <br>戻り値: なし 

    <br>実装:
    - 継承したBaseControllerのコンストラクタを呼び出してください。引数には引数[app]、Page2クラス(page2.pyからインポート)を渡してください。
    - self.my_model変数に引数[my_model]を代入して保持してください。

- def _set_view_event(self) -> None:
    <br>説明：
    <br>　　ViewのUI要素（ボタンなど）イベントへControllerのメソッドを紐づける為のメソッド。
    <br>引数:
    1. self: 自クラスインスタンス
    
    <br>戻り値: なし

    <br>実装:
    - self.viewからボタン要素を取得し、configureメソッドでself.goto_pageメソッドを紐づける。引数に文字列"Page2"を渡す。

- def _send_view_data(self) -> dict:
    <br>説明:
    <br>　　UI生成時、Page2クラスに渡すデータを設定します。
    <br>引数:
    1. self: 自クラスインスタンス
    
    <br>戻り値: 辞書型リスト

    <br>実装:
    - 変数self.my_modelからtitleとcontentを取得し、戻り値に辞書型リスト返してください。
    <br>戻り値データの形: {'title': title, 'content': content}

## 5.6. viewsパッケージ
UI生成を行うビュークラスの実装。

### 5.6.1. Page1クラス  
モジュール：page1.py<br>
継承: CTkFrame(customtkinterライブラリ)
下記メソッドを定義してください。
- def \_\_init\_\_(self, master:ctk.CTk, data:dict|None, **kwargs) -> None:
    <br>説明:
    <br>　　インスタンス生成時の初期化処理です。
    <br>引数:
    1. self: 自クラスインスタンス
    2. master: CustomCTkクラス
    3. data: UI生成で使用するデータ
    4. 辞書型データ
    
    <br>戻り値: なし
    
    <br>実装:
    - 継承しているCTkFrameのコンストラクタを呼び出す。引数には引数[master]と引数[**kwargs]を渡す。
    - 下記のインスタンス変数を定義し、初期化してください。
      | インスタンス変数名 | 初期化値 | 役割 | 備考 |
      | ---------------- | ------- | ---- | ---- |
      | self.data | 引数[data] | UI表示に使用するデータ。 | Page2のタイトルとコンテンツの文字列データです。 |
    - self.build_ui()メソッドの呼び出し、UI生成を行う。※引数なし

- def build_ui(self) -> None:
    <br>説明:
    <br>　　UI生成を行う為のメソッドです。grid()メソッドを使用してください。
    <br>引数: 
    1. self: 自クラスインスタンス 
    2. master: CustomCTkクラス 
    3. data: UI生成で使用するデータ 
    4. **kwargs: 辞書型データ
    <br>戻り値: なし
    
    <br>実装:
    <br>このPage1クラスを親にcustomtkinterのウィジェットを配置してください。機能の画像を参考に画面のUIを作成してください。

### 5.6.2. Page2クラス

モジュール：page2.py
継承: CTkFrame(customtkinterライブラリ)

- def \_\_init\_\_(self, master:ctk.CTk, data:dict|None, **kwargs) -> None:
  
    <br>説明:
    <br>　　インスタンス生成時の初期化処理です。
    <br>引数:
    1. self: 自クラスインスタンス
    2. master: CustomCTkクラス
    3. data: UI生成で使用するデータ
    4. **kwargs: 辞書型データ

    <br>戻り値: なし
    
    <br>実装:
    - 継承しているCTkFrameのコンストラクタを呼び出す。引数には引数[master]と引数[**kwargs]を渡す。
    - 下記のインスタンス変数を定義し、初期化してください。
      | インスタンス変数名 | 初期化値 | 役割 | 備考 |
      | ---------------- | ------- | ---- | ---- |
      | self.controller | 引数[controller] | Page2のタイトル |
      | self.data | 引数[data] | UI表示に使用するデータ。 | Page2のタイトルとコンテンツの文字列データです。 |

- def build_ui(self) -> None:
    <br>説明:
    <br>　　UI生成を行う為のメソッドです。grid()メソッドを使用してください。
    <br>引数: 
    1. self: 自クラスインスタンス 
    2. master: CustomCTkクラス 
    3. data: UI生成で使用するデータ 
    4. **kwargs: 辞書型データ

    <br>戻り値: なし
    
    <br>実装:
    <br>　　このPage1クラスを親にcustomtkinterのウィジェットを配置してください。機能の画像を参考に画面のUIを作成してください。